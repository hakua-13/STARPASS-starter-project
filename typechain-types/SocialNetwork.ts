/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

export interface SocialNetworkInterface extends utils.Interface {
  functions: {
    "getLastPostId()": FunctionFragment;
    "getPost(uint256)": FunctionFragment;
    "like(uint256)": FunctionFragment;
    "likedTweet(address,uint256)": FunctionFragment;
    "post(string)": FunctionFragment;
    "tweetDataMap(uint256)": FunctionFragment;
    "unlike(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getLastPostId"
      | "getPost"
      | "like"
      | "likedTweet"
      | "post"
      | "tweetDataMap"
      | "unlike"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getLastPostId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPost",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "like",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "likedTweet",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "post",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "tweetDataMap",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "unlike",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "getLastPostId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPost", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "like", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "likedTweet", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "post", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tweetDataMap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unlike", data: BytesLike): Result;

  events: {
    "TweetPosted(address,string,uint256)": EventFragment;
    "likeToggled(address,uint256,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "TweetPosted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "likeToggled"): EventFragment;
}

export interface TweetPostedEventObject {
  posterAddr: string;
  message: string;
  time: BigNumber;
}
export type TweetPostedEvent = TypedEvent<
  [string, string, BigNumber],
  TweetPostedEventObject
>;

export type TweetPostedEventFilter = TypedEventFilter<TweetPostedEvent>;

export interface likeToggledEventObject {
  sender: string;
  postId: BigNumber;
  isLike: boolean;
}
export type likeToggledEvent = TypedEvent<
  [string, BigNumber, boolean],
  likeToggledEventObject
>;

export type likeToggledEventFilter = TypedEventFilter<likeToggledEvent>;

export interface SocialNetwork extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SocialNetworkInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getLastPostId(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPost(
      _postId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        message: string;
        totalLikes: BigNumber;
        time: BigNumber;
      }
    >;

    like(
      _postId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    likedTweet(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    post(
      _message: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tweetDataMap(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, string] & {
        message: string;
        totalLike: BigNumber;
        time: BigNumber;
        posterAddr: string;
      }
    >;

    unlike(
      _postId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  getLastPostId(overrides?: CallOverrides): Promise<BigNumber>;

  getPost(
    _postId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber] & {
      message: string;
      totalLikes: BigNumber;
      time: BigNumber;
    }
  >;

  like(
    _postId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  likedTweet(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  post(
    _message: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tweetDataMap(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, string] & {
      message: string;
      totalLike: BigNumber;
      time: BigNumber;
      posterAddr: string;
    }
  >;

  unlike(
    _postId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getLastPostId(overrides?: CallOverrides): Promise<BigNumber>;

    getPost(
      _postId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        message: string;
        totalLikes: BigNumber;
        time: BigNumber;
      }
    >;

    like(
      _postId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    likedTweet(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    post(
      _message: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    tweetDataMap(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, string] & {
        message: string;
        totalLike: BigNumber;
        time: BigNumber;
        posterAddr: string;
      }
    >;

    unlike(
      _postId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "TweetPosted(address,string,uint256)"(
      posterAddr?: PromiseOrValue<string> | null,
      message?: null,
      time?: null
    ): TweetPostedEventFilter;
    TweetPosted(
      posterAddr?: PromiseOrValue<string> | null,
      message?: null,
      time?: null
    ): TweetPostedEventFilter;

    "likeToggled(address,uint256,bool)"(
      sender?: PromiseOrValue<string> | null,
      postId?: null,
      isLike?: null
    ): likeToggledEventFilter;
    likeToggled(
      sender?: PromiseOrValue<string> | null,
      postId?: null,
      isLike?: null
    ): likeToggledEventFilter;
  };

  estimateGas: {
    getLastPostId(overrides?: CallOverrides): Promise<BigNumber>;

    getPost(
      _postId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    like(
      _postId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    likedTweet(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    post(
      _message: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tweetDataMap(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unlike(
      _postId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getLastPostId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPost(
      _postId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    like(
      _postId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    likedTweet(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    post(
      _message: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tweetDataMap(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unlike(
      _postId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
